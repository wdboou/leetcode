class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<int> pos;
        if(s.size()==0) return res;
        
        pos.push_back(-1);
        back_track(s,0,res,pos);
        return res;
    }
    
    void back_track(string &s, int start, vector<vector<string>> &res, vector<int> &pos)
    {
        if(start==s.size())
        {
            vector<string> temp;
            // output
            for(int i=0; i<pos.size()-1; i++)
            {
                string temp_s = s.substr(pos[i]+1, pos[i+1]-pos[i]);
                temp.push_back(temp_s);
            }
            res.push_back(temp);
        }else
        for(int i=start; i<s.size(); i++)
        {
            if(valid_Palindrome(s,start, i))
            {
                pos.push_back(i);
                back_track(s, i+1, res, pos);
                pos.pop_back();
            }
        }
    }
    
    bool valid_Palindrome(string s, int i, int j)
    {
        while(i<j)
        {
            if(s[i++]!=s[j--]) return false;
        }
        return true;
    }
};
