/*
Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.'.

You may assume that there will be only one unique solution.


A sudoku puzzle...

http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png

...and its solution numbers marked in red.
http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png

Discuss

*/

class Solution {
public:
    void solveSudoku(vector<vector<char> > &board) {
        // main idea backtrack
     vector<vector<bool>> row(9,vector<bool>(9,false));
     vector<vector<bool>> col(9,vector<bool>(9,false));
     vector<vector<bool>> box(9,vector<bool>(9,false));
     // initialization
     for(int i=0; i<9; i++)
     {
         for(int j=0;j<9; j++)
         {
             if(board[i][j]=='.') continue;
             else
             {
                 int idx = board[i][j]-'1';
                 row[i][idx]=col[j][idx]=box[i-i%3+j/3][idx]=true;
             }
         }
     }
     bool res = fill_sudoku(board,row,col,box,0);
    }
    bool valid(vector<vector<bool>> &row, vector<vector<bool>> &col, vector<vector<bool>> &box, int index, int i, int j)
    {
        if(row[i][index]||col[j][index]||box[i-i%3+j/3][index]) return false;
        else return true;
    }
    bool fill_sudoku(vector<vector<char>> &board, vector<vector<bool>> &row,vector<vector<bool>> &col, vector<vector<bool>> &box,int idx)
    {
        while(idx<81&&board[idx/9][idx%9]!='.') idx++;
        if(idx==81) return true;
        
        int r=idx/9, c=idx%9;
        
        for(int i=0; i<9; i++)
        {
            if(valid(row,col,box,i,r,c)) 
            {
                board[r][c] = '1'+i;
                row[r][i]=col[c][i]=box[r-r%3+c/3][i]=true;
                if(fill_sudoku(board,row,col,box,idx)) return true;
                board[r][c] = '.';
                row[r][i]=col[c][i]=box[r-r%3+c/3][i]=false;
            }
        }
        return false;
    }
};
