/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        if(inorder.empty()) return NULL;
        return recur(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1);
    }
    TreeNode* recur(vector<int> &inorder, int i_start, int i_end, vector<int> &postorder, int p_start, int p_end)
    {
        if(i_start>i_end) return NULL;
        // find the index
        int idx;
        for(int i=i_start; i<=i_end; i++)
        {
            if(postorder[p_end] == inorder[i]) 
            {
                idx = i;
                break;
            }
        }
        TreeNode* temp = new TreeNode(postorder[p_end]);
        temp->left = recur(inorder, i_start, idx-1, postorder, p_start, p_start+idx-1-i_start);
        temp->right = recur(inorder, idx+1, i_end, postorder, p_start+idx-i_start , p_end-1);
        return temp;
    }
};
