/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ListNode *start = NULL;
        ListNode *first = NULL;
        ListNode *previous = NULL;
        ListNode *temp = NULL;
        ListNode *_head;
        _head = head;
        if(m==n) return _head;
        int _idx = 1;
        while(head!=NULL)
        {
            if (_idx == 1 && m==1)
            {
                first = head;
                temp = head->next;
                head->next = previous;
                previous = head;
                head = temp;
                _idx++;
                continue;
            }
            else if (_idx == m-1 ) // start the reverse here
            {
                start = head;
                first = head->next;
                head = head->next;
                _idx++;
                continue;
            }else if(_idx >= m && _idx < n)
            {
                temp = head->next;
                head->next = previous;
                previous = head;
                head = temp;
                _idx ++;
                continue;
            }else if(_idx == n)
            {
                first->next = head->next;
                head->next = previous;
                previous = head;
                if(m!=1)
                start->next = head;
                break;
            }
            head = head->next;
            _idx++;
        }
        if (m==1)
        return previous;
        else return _head;
    }
};
