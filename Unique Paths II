class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        // using dynamic programming
        int n_r = obstacleGrid.size();
        int n_col = obstacleGrid[0].size();
        // check when there is only one row or only one column
        if(n_r==1)
        {
            for(int i=0; i<n_col; i++)
            {
                if (obstacleGrid[0][i]==1) return 0;
            }
            return 1;
        }else if(n_col == 1)
        {
            for(int i=0; i<n_r; i++)
            {
                if(obstacleGrid[i][0]==1) return 0;
            }
            return 1;
        }
        int *res = new int [n_col];
        if(obstacleGrid[0][0]==1) res[0] = 0;
        else res[0] = 1;
        for(int i=1; i<n_col; i++)
        {
            if(obstacleGrid[0][i]==1) res[i]=0;
            else res[i] = res[i-1];
        }
        for(int i=1; i<n_r; i++)
        {
            if(obstacleGrid[i][0] == 1) res[0] = 0;
            for(int j=1; j<n_col; j++)
            {
                if(obstacleGrid[i][j]==1) res[j] = 0;
                else 
                {
                    res[j] += res[j-1];
                }
            }
        }
        return res[n_col-1];
        
    }
};
