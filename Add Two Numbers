/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(l1 == NULL) return l2;
        else if(l2==NULL) return l1;
        ListNode *start_l1 = new ListNode(0);
        ListNode *start_l2 = new ListNode(0);
        start_l1->next = l1;
        start_l2->next = l2;
        //keep the two linked list the same length;
        while (true)
        {
            if(l1->next == NULL)
            {
                while(l2->next != NULL)
                {
                    ListNode *a = new ListNode(0);
                    l1->next = a;
                    l1 = l1->next;
                    l2 = l2->next;
                }
                break;
            } else if(l2->next == NULL)
            {
                while (l1->next != NULL)
                {
                    ListNode *a = new ListNode(0);
                    l2->next = a;
                    l2 = l2->next;
                    l1 = l1->next;
                }
                break;
            }
            l1 = l1->next;
            l2 = l2->next;
        }
        // ok they are the same length now
        l1 = start_l1->next;
        l2 = start_l2->next;
        int higher = 0;
        ListNode *end = new ListNode(0);
        while(true)
        {
            int temp = (l1->val + l2->val +higher)%10;
            higher = (l1->val + l2->val +higher)/ 10;
            l1->val = temp;
            if(l1->next ==NULL)
            {
                if(higher == 0) break;
                else 
                {
                    l1->next = end;
                    end->val = higher;
                    break;
                }
            }
            l1 = l1->next;
            l2 = l2->next;
        }
        return start_l1->next;
    }
};
