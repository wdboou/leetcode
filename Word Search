/*
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
*/


class Solution {
public:
    bool exist(vector<vector<char> > &board, string word) {
        for(int i=0; i<board.size(); i++)
        {
            for(int j=0; j<board[0].size(); j++)
            {
                if(board[i][j]==word[0])
                    if(dfs(board,i,j,word.substr(1))) return true;
            }
        }
        return false;
    }
    bool dfs(vector<vector<char>> &board, int row, int col, string word)
    {
        if(word.empty()) return true;
        char temp = board[row][col];
        board[row][col] = '#';
        //up
        if(row-1>=0&&board[row-1][col]==word[0])
        {
            if(dfs(board,row-1,col,word.substr(1)))
                return true;
        }
        //down
        if(row+1<board.size()&&board[row+1][col]==word[0])
        {
            if(dfs(board,row+1,col,word.substr(1)))
                return true;
        }
        //left
        if(col-1>=0&&board[row][col-1]==word[0])
        {
            if(dfs(board,row,col-1,word.substr(1)))
                return true;
        }
        //right
        if(col+1<board[0].size()&&board[row][col+1]==word[0])
        {
            if(dfs(board,row,col+1,word.substr(1)))
                return true;
        }
        //not true above then return false
        board[row][col]=temp;
        return false;
    }
};
